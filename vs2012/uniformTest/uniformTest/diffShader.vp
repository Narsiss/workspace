#version 330

in vec4 vVertex;
in vec3 vNormal;

//uniform elements
uniform vec4 ambientColor;
uniform vec4 diffuseColor;
uniform vec4 specularColor;
uniform vec3 lightPosition;
uniform mat4 mvMatrix;
uniform mat4 mvpMatrix;
uniform mat3 normalMatrix;
//pass color to flatshader
smooth out vec4 vVaryingColor;

void main()
{
	vec3 vEyeNormal = normalMatrix * vNormal;
	vec4 vPosition4 = mvMatrix * vVertex;
	vec3 vPosition3 = vPosition4.xyz/vPosition4.w;
	vec3 vLightDir = normalize(lightPosition - vPosition3);
	//diffuse part
	float diff = max(0.0,dot(vEyeNormal,vLightDir));
	vVaryingColor.rgb = diff * diffuseColor.rgb;
	vVaryingColor.a = 1.0;
	//ambient part
	vVaryingColor += ambientColor;
	
	//specular part
	vec3 vReflection = normalize(reflect(-vLightDir,vEyeNormal));
	float spec = max(0.0,dot(vEyeNormal,vReflection));
	if(diff != 0)
	{
		float fSpec = pow(spec,128.0);
		vVaryingColor.rgb += vec3(fSpec,fSpec,fSpec);
	}
	
	gl_Position = mvpMatrix*vVertex;
}